{"version":3,"file":"static/js/811.8c04efbd.chunk.js","mappings":"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","sources":["webpack://wallet/./src/pages/RegistrationPage/RegistrationPage.module.css?b753","webpack://wallet/./src/components/RegistrationForm/registrationForm.module.css?68fd","webpack://wallet/./src/components/RegistrationForm/PasswordStrengthBar.module.css?088c","components/RegistrationForm/PasswordStrenghtBar.jsx","components/RegistrationForm/RegistrationForm.jsx","pages/RegistrationPage/RegistrationPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"Container\":\"RegistrationPage_Container__C45Ns\",\"LogoContainer\":\"RegistrationPage_LogoContainer__D2H1j\",\"Image\":\"RegistrationPage_Image__ipGuD\",\"Title\":\"RegistrationPage_Title__UkhHL\",\"FormContainer\":\"RegistrationPage_FormContainer__zIAl6\"};","// extracted by mini-css-extract-plugin\nexport default {\"Container\":\"registrationForm_Container__ane9H\",\"LogoContainer\":\"registrationForm_LogoContainer__x+R1l\",\"Logo\":\"registrationForm_Logo__MpsqS\",\"Title\":\"registrationForm_Title__EXLDh\",\"Form\":\"registrationForm_Form__AEfmO\",\"Field\":\"registrationForm_Field__Qg2Cd\",\"ErrorMessage\":\"registrationForm_ErrorMessage__JrIdY\",\"InputIcon\":\"registrationForm_InputIcon__I2mjA\",\"Input\":\"registrationForm_Input__ThI2I\",\"PasswordVisibilityToggle\":\"registrationForm_PasswordVisibilityToggle__uHnbZ\",\"ButtonContainer\":\"registrationForm_ButtonContainer__2wjgu\",\"ButtonPrimary\":\"registrationForm_ButtonPrimary__KcGMA\",\"ButtonSecondary\":\"registrationForm_ButtonSecondary__WcKHg\"};","// extracted by mini-css-extract-plugin\nexport default {\"ProgressBar\":\"PasswordStrengthBar_ProgressBar__+6ZoF\",\"ProgressText\":\"PasswordStrengthBar_ProgressText__52RU4\",\"Progress\":\"PasswordStrengthBar_Progress__0XDgv\"};","import React from 'react';\nimport zxcvbn from 'zxcvbn';\nimport css from './PasswordStrengthBar.module.css';\n\n\nconst PasswordStrengthBar = ({ password }) => {\n    const result = zxcvbn(password);\n    const num = (result.score * 100) / 4;\n\n    const barColor = () => {\n        switch (result.score) {\n        case 0:\n            return 'none';\n        case 1:\n            return '#FF6596';\n        case 2:\n            return '#FED057';\n        case 3:\n            return '#80d564';\n        case 4:\n            return '#24CCA7';\n        default:\n            return 'none';\n        }\n    }\n\n    const changeBarColor = () => ({\n        width: `${num}%`,\n        background: barColor(),\n        height: '7px',\n    })\n    \n    return (\n        <div className={css.ProgressBar}>\n            <div className={css.Progress} style={changeBarColor()}></div>\n        </div>\n        );\n};\n\nexport default PasswordStrengthBar;","import React from 'react';\nimport { Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';                       \nimport EmailIcon from '@mui/icons-material/Email';\nimport LockIcon from '@mui/icons-material/Lock';\nimport AccountBoxIcon from '@mui/icons-material/AccountBox';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff'; \nimport logo from '../../utils/images/wallet-icon.png';\nimport css from './registrationForm.module.css';\nimport { register } from 'redux/auth/authOperations';\nimport PasswordStrengthBar from './PasswordStrenghtBar';\n\n\nconst userSchema = Yup.object({\n    email: Yup.string().email('Invalid e-mail.').required('E-mail is required.').matches( /^\\w+[\\w-.]*\\w@\\w+((-\\w+)|(\\w*))\\.[a-z]{2,3}$/, 'Invalid email.'),\n    password: Yup.string().matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{6,12}$/, 'Password must contain 6 - 12 characters: one uppercase, one lowercase, one number and one special character.').required('Password is required.'),\n    confirmPassword: Yup.string().oneOf([Yup.ref('password')], 'Password must match.').required('Password confirmation is required.'),\n    name: Yup.string().min(1, 'Your name must contain at leastr 1 character')\n});\n\n  \nexport const RegisterForm = () => {\n    const dispatch = useDispatch();\n    const navigate = useNavigate();  // eslint-disable-next-line\n    const [password, setPassword] = useState('');\n    const [showPassword, setShowPassword] = useState(false);\n    const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n            \n    const handlePasswordVisibility = () => {\n        setShowPassword(!showPassword);\n        console.log('setshow');\n    };\n    \n    const handleConfirmPasswordVisibility = () => {\n        setShowConfirmPassword(!showConfirmPassword);\n        console.log('setconfirm');\n    };\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        const form = event.currentTarget;\n        const email = form.elements.email.value;\n        const password = form.elements.password.value;\n        const confirmPassword = form.elements.confirmPassword.value;\n        const name = form.elements.name.value;\n\n        dispatch(register({ email, password, confirmPassword, name, }));\n        console.log('cos cos cos');\n        console.log(email, password, confirmPassword, name);\n        navigate('/login');\n        form.reset();\n    };\n\n    return (\n        <Formik\n            initialValues={{ email: '', password: '', confirmPassword: '', name: '', }}\n            validationSchema={userSchema}\n            validateOnBlur>{\n                ({ values, handleBlur, isValid, touched, dirty, errors }) => (\n                <div className={css.Container}>\n                <Form className={css.Form} onSubmit={(event)=>handleSubmit(event)}>\n                    <div className={css.LogoContainer}>\n                    <img className={css.Logo} alt=\"Logo\" src={logo} />\n                    <h1 className={css.Title}>Wallet</h1>\n                    </div>\n                    <label className={css.Field}>\n                        {touched.email && errors.email ? (\n                            <p\n                            style={{\n                                color: '#ff6596',\n                                position: 'absolute',\n                                bottom: '-30px',\n                                left: '0',\n                                fontFamily: 'Poppins',\n                                fontSize: '13px',\n                            }}\n                            >\n                            {errors.email}\n                            </p>\n                        ) : null}\n\n                        <EmailIcon\n                            className={css.InputIcon}\n                            style={{ color: '#e0e0e0' }}\n                        />\n                        <Field\n                            className={css.Input}\n                            type=\"text\"\n                            name=\"email\"\n                            id=\"email\"\n                            placeholder=\"E-mail\"\n                            value={values.email}\n                            onBlur={handleBlur}\n                            autoComplete='off'\n                        />\n                    </label>\n                    <label className={css.Field}>\n                        {touched.password && errors.password ? (\n                            <p\n                            style={{\n                                color: '#ff6596',\n                                position: 'absolute',\n                                bottom: '-30px',\n                                left: '0',\n                                fontFamily: 'Poppins',\n                                fontSize: '13px',\n                            }}\n                            >\n                            {errors.password}\n                            </p>\n                        ) : null}\n\n                        <LockIcon\n                            className={css.InputIcon}\n                            style={{ color: '#e0e0e0' }}\n                        />\n                        <Field\n                            className={css.Input}\n                            type={showPassword ? 'text' : 'password'}\n                            name=\"password\"\n                            placeholder=\"Password\"\n                            id=\"password\"\n                            value={values.password}\n                            onBlur={handleBlur}\n                            autoComplete=\"new-password\"\n                        />\n                        <span\n                            onClick={handlePasswordVisibility}\n                            className={css.PasswordVisibilityToggle}\n                        >\n                            {showPassword ? (\n                            <VisibilityOffIcon style={{ color: '#e0e0e0' }} />\n                            ) : (\n                            <VisibilityIcon style={{ color: '#e0e0e0' }} />\n                            )}\n                        </span>\n                    </label>\n                    <label className={css.Field}>\n                        {touched.confirmPassword && errors.confirmPassword ? (\n                            <p\n                            style={{\n                                color: '#ff6596',\n                                position: 'absolute',\n                                bottom: '-30px',\n                                left: '0',\n                                fontFamily: 'Poppins',\n                                fontSize: '13px',\n                            }}\n                            >\n                            {errors.confirmPassword}\n                            </p>\n                        ) : null}\n\n                        <LockIcon\n                            className={css.InputIcon}\n                            style={{ color: '#e0e0e0' }}\n                        />\n                        <Field\n                            className={css.Input}\n                            type={showConfirmPassword ? 'text' : 'password'}\n                            name=\"confirmPassword\"\n                            id=\"confirmPassword\"\n                            placeholder=\"Confirm password\"\n                            value={values.confirmPassword}\n                            onBlur={handleBlur}                  \n                            autoComplete=\"new-password\"\n                        />\n                            <span\n                                onClick={handleConfirmPasswordVisibility}\n                                className={css.PasswordVisibilityToggle}\n                            >\n                            {showConfirmPassword ? (\n                            <VisibilityOffIcon style={{ color: '#e0e0e0' }} />\n                            ) : (\n                            <VisibilityIcon style={{ color: '#e0e0e0' }} />\n                            )}\n                        </span>\n                        <PasswordStrengthBar password={password} />\n                    </label>\n                    <label className={css.Field}>\n                        {touched.name && errors.name ? (\n                            <p\n                            style={{\n                                color: '#ff6596',\n                                position: 'absolute',\n                                bottom: '-30px',\n                                left: '0',\n                                fontFamily: 'Poppins',\n                                fontSize: '13px',\n                            }}\n                            >\n                            {errors.name}\n                            </p>\n                        ) : null}\n\n                        <AccountBoxIcon\n                            className={css.InputIcon}\n                            style={{ color: '#e0e0e0' }}\n                        />\n                        <Field\n                            className={css.Input}\n                            type=\"text\"\n                            name=\"name\"\n                            id=\"name\"\n                            placeholder=\"First name\"\n                            value={values.name}\n                            onBlur={handleBlur}\n                            autoComplete='off'\n                        />\n                    </label>\n                    <div className={css.ButtonContainer}>\n                    <button type=\"submit\" className={css.ButtonPrimary}>\n                        Register\n                    </button>\n\n                    <Link to=\"/login\">\n                        <button type=\"button\" className={css.ButtonSecondary}>\n                        Log in\n                        </button>\n                    </Link>\n                    </div>\n                </Form>\n                </div>\n            )}\n        </Formik>\n    );\n};","import React from \"react\";\nimport Media from \"react-media\";\nimport picture from '../../utils/images/frame-woman.png';\nimport css from './RegistrationPage.module.css';\nimport { RegisterForm } from \"components/RegistrationForm/RegistrationForm\";\n\nconst RegistrationPage = () => { \n    return (\n        <div className={css.Container}>\n            <Media query='(min-width: 767px)'\n                render={() => (\n                    <div className={css.LogoContainer}>\n                        <img className={css.Image} src={picture} alt='' />\n                        <h1 className={css.Title}>Finance App</h1>\n                    </div>\n                )}\n            />\n            <div className={css.FormContainer}>\n                <RegisterForm />\n            </div>\n        </div>\n    );\n};\n\nexport default RegistrationPage;"],"names":["password","result","zxcvbn","num","score","barColor","className","css","style","width","background","height","userSchema","Yup","email","required","matches","confirmPassword","oneOf","name","min","RegisterForm","dispatch","useDispatch","navigate","useNavigate","useState","showPassword","setShowPassword","showConfirmPassword","setShowConfirmPassword","handlePasswordVisibility","console","log","handleConfirmPasswordVisibility","initialValues","validationSchema","validateOnBlur","values","handleBlur","touched","isValid","errors","dirty","onSubmit","event","preventDefault","form","currentTarget","elements","value","register","reset","handleSubmit","alt","src","color","position","bottom","left","fontFamily","fontSize","Email","type","id","placeholder","onBlur","autoComplete","Lock","onClick","VisibilityOff","Visibility","AccountBox","to","query","render","picture"],"sourceRoot":""}